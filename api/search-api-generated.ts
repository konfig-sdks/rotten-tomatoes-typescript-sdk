/* tslint:disable */
/* eslint-disable */
/*
Rotten Tomatoes

Test our API services using I/O Docs.

The version of the OpenAPI document: 1.0
Contact: mike.ralphson@gmail.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} [q] The plain text search query to search for a movie. Remember to URI encode this!
         * @param {string} [pageLimit] The amount of movie search results to show per page
         * @param {string} [page] The selected page of movie search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesJson: async (q?: string, pageLimit?: string, page?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter['page_limit'] = pageLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/movies.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {SearchApiMoviesJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesJson(requestParameters: SearchApiMoviesJsonRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesJson(requestParameters.q, requestParameters.pageLimit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {SearchApiMoviesJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesJson(requestParameters: SearchApiMoviesJsonRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.moviesJson(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for moviesJson operation in SearchApi.
 * @export
 * @interface SearchApiMoviesJsonRequest
 */
export type SearchApiMoviesJsonRequest = {
    
    /**
    * The plain text search query to search for a movie. Remember to URI encode this!
    * @type {string}
    * @memberof SearchApiMoviesJson
    */
    readonly q?: string
    
    /**
    * The amount of movie search results to show per page
    * @type {string}
    * @memberof SearchApiMoviesJson
    */
    readonly pageLimit?: string
    
    /**
    * The selected page of movie search results
    * @type {string}
    * @memberof SearchApiMoviesJson
    */
    readonly page?: string
    
}

/**
 * SearchApiGenerated - object-oriented interface
 * @export
 * @class SearchApiGenerated
 * @extends {BaseAPI}
 */
export class SearchApiGenerated extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {SearchApiMoviesJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public moviesJson(requestParameters: SearchApiMoviesJsonRequest = {}, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).moviesJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
