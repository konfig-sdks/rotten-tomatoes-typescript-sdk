/* tslint:disable */
/* eslint-disable */
/*
Rotten Tomatoes

Test our API services using I/O Docs.

The version of the OpenAPI document: 1.0
Contact: mike.ralphson@gmail.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DvdListsApi - axios parameter creator
 * @export
 */
export const DvdListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} [pageLimit] The amount of new release dvds to show per page
         * @param {string} [page] The selected page of current DVD releases
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentReleases: async (pageLimit?: string, page?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/dvds/current_releases.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (pageLimit !== undefined) {
                localVarQueryParameter['page_limit'] = pageLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/dvds/current_releases.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [pageLimit] The amount of new release dvds to show per page
         * @param {string} [page] The selected page of new release DVDs
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReleasesJson: async (pageLimit?: string, page?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/dvds/new_releases.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (pageLimit !== undefined) {
                localVarQueryParameter['page_limit'] = pageLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/dvds/new_releases.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [limit] Limits the number of top rentals returned
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopRentalsJson: async (limit?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/dvds/top_rentals.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/dvds/top_rentals.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [pageLimit] The amount of upcoming dvds to show per page
         * @param {string} [page] The selected page of upcoming DVDs
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingDvds: async (pageLimit?: string, page?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/dvds/upcoming.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (pageLimit !== undefined) {
                localVarQueryParameter['page_limit'] = pageLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/dvds/upcoming.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DvdListsApi - functional programming interface
 * @export
 */
export const DvdListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DvdListsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetCurrentReleasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentReleases(requestParameters: DvdListsApiGetCurrentReleasesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentReleases(requestParameters.pageLimit, requestParameters.page, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetNewReleasesJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewReleasesJson(requestParameters: DvdListsApiGetNewReleasesJsonRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewReleasesJson(requestParameters.pageLimit, requestParameters.page, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetTopRentalsJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopRentalsJson(requestParameters: DvdListsApiGetTopRentalsJsonRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopRentalsJson(requestParameters.limit, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetUpcomingDvdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUpcomingDvds(requestParameters: DvdListsApiGetUpcomingDvdsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUpcomingDvds(requestParameters.pageLimit, requestParameters.page, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DvdListsApi - factory interface
 * @export
 */
export const DvdListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DvdListsApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetCurrentReleasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentReleases(requestParameters: DvdListsApiGetCurrentReleasesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCurrentReleases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetNewReleasesJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReleasesJson(requestParameters: DvdListsApiGetNewReleasesJsonRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNewReleasesJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetTopRentalsJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopRentalsJson(requestParameters: DvdListsApiGetTopRentalsJsonRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTopRentalsJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DvdListsApiGetUpcomingDvdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingDvds(requestParameters: DvdListsApiGetUpcomingDvdsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUpcomingDvds(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCurrentReleases operation in DvdListsApi.
 * @export
 * @interface DvdListsApiGetCurrentReleasesRequest
 */
export type DvdListsApiGetCurrentReleasesRequest = {
    
    /**
    * The amount of new release dvds to show per page
    * @type {string}
    * @memberof DvdListsApiGetCurrentReleases
    */
    readonly pageLimit?: string
    
    /**
    * The selected page of current DVD releases
    * @type {string}
    * @memberof DvdListsApiGetCurrentReleases
    */
    readonly page?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof DvdListsApiGetCurrentReleases
    */
    readonly country?: string
    
}

/**
 * Request parameters for getNewReleasesJson operation in DvdListsApi.
 * @export
 * @interface DvdListsApiGetNewReleasesJsonRequest
 */
export type DvdListsApiGetNewReleasesJsonRequest = {
    
    /**
    * The amount of new release dvds to show per page
    * @type {string}
    * @memberof DvdListsApiGetNewReleasesJson
    */
    readonly pageLimit?: string
    
    /**
    * The selected page of new release DVDs
    * @type {string}
    * @memberof DvdListsApiGetNewReleasesJson
    */
    readonly page?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof DvdListsApiGetNewReleasesJson
    */
    readonly country?: string
    
}

/**
 * Request parameters for getTopRentalsJson operation in DvdListsApi.
 * @export
 * @interface DvdListsApiGetTopRentalsJsonRequest
 */
export type DvdListsApiGetTopRentalsJsonRequest = {
    
    /**
    * Limits the number of top rentals returned
    * @type {string}
    * @memberof DvdListsApiGetTopRentalsJson
    */
    readonly limit?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof DvdListsApiGetTopRentalsJson
    */
    readonly country?: string
    
}

/**
 * Request parameters for getUpcomingDvds operation in DvdListsApi.
 * @export
 * @interface DvdListsApiGetUpcomingDvdsRequest
 */
export type DvdListsApiGetUpcomingDvdsRequest = {
    
    /**
    * The amount of upcoming dvds to show per page
    * @type {string}
    * @memberof DvdListsApiGetUpcomingDvds
    */
    readonly pageLimit?: string
    
    /**
    * The selected page of upcoming DVDs
    * @type {string}
    * @memberof DvdListsApiGetUpcomingDvds
    */
    readonly page?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof DvdListsApiGetUpcomingDvds
    */
    readonly country?: string
    
}

/**
 * DvdListsApiGenerated - object-oriented interface
 * @export
 * @class DvdListsApiGenerated
 * @extends {BaseAPI}
 */
export class DvdListsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {DvdListsApiGetCurrentReleasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DvdListsApiGenerated
     */
    public getCurrentReleases(requestParameters: DvdListsApiGetCurrentReleasesRequest = {}, options?: AxiosRequestConfig) {
        return DvdListsApiFp(this.configuration).getCurrentReleases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DvdListsApiGetNewReleasesJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DvdListsApiGenerated
     */
    public getNewReleasesJson(requestParameters: DvdListsApiGetNewReleasesJsonRequest = {}, options?: AxiosRequestConfig) {
        return DvdListsApiFp(this.configuration).getNewReleasesJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DvdListsApiGetTopRentalsJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DvdListsApiGenerated
     */
    public getTopRentalsJson(requestParameters: DvdListsApiGetTopRentalsJsonRequest = {}, options?: AxiosRequestConfig) {
        return DvdListsApiFp(this.configuration).getTopRentalsJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DvdListsApiGetUpcomingDvdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DvdListsApiGenerated
     */
    public getUpcomingDvds(requestParameters: DvdListsApiGetUpcomingDvdsRequest = {}, options?: AxiosRequestConfig) {
        return DvdListsApiFp(this.configuration).getUpcomingDvds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
