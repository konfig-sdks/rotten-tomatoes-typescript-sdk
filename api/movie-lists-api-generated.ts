/* tslint:disable */
/* eslint-disable */
/*
Rotten Tomatoes

Test our API services using I/O Docs.

The version of the OpenAPI document: 1.0
Contact: mike.ralphson@gmail.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MovieListsApi - axios parameter creator
 * @export
 */
export const MovieListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} [limit] Limits the number of movies returned
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxOfficeJson: async (limit?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/movies/box_office.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/movies/box_office.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [pageLimit] The amount of movies in theaters to show per page
         * @param {string} [page] The selected page of in theaters movies
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntheaterMovies: async (pageLimit?: string, page?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/movies/in_theaters.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (pageLimit !== undefined) {
                localVarQueryParameter['page_limit'] = pageLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/movies/in_theaters.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [limit] Limits the number of opening movies returned
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningMovies: async (limit?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/movies/opening.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/movies/opening.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [pageLimit] The amount of upcoming movies to show per page
         * @param {string} [page] The selected page of upcoming movies
         * @param {string} [country] Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingMovies: async (pageLimit?: string, page?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/movies/upcoming.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "key", configuration})
            if (pageLimit !== undefined) {
                localVarQueryParameter['page_limit'] = pageLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/movies/upcoming.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovieListsApi - functional programming interface
 * @export
 */
export const MovieListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MovieListsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetBoxOfficeJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoxOfficeJson(requestParameters: MovieListsApiGetBoxOfficeJsonRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoxOfficeJson(requestParameters.limit, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetIntheaterMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntheaterMovies(requestParameters: MovieListsApiGetIntheaterMoviesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntheaterMovies(requestParameters.pageLimit, requestParameters.page, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetOpeningMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpeningMovies(requestParameters: MovieListsApiGetOpeningMoviesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpeningMovies(requestParameters.limit, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetUpcomingMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUpcomingMovies(requestParameters: MovieListsApiGetUpcomingMoviesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUpcomingMovies(requestParameters.pageLimit, requestParameters.page, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MovieListsApi - factory interface
 * @export
 */
export const MovieListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MovieListsApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetBoxOfficeJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxOfficeJson(requestParameters: MovieListsApiGetBoxOfficeJsonRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoxOfficeJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetIntheaterMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntheaterMovies(requestParameters: MovieListsApiGetIntheaterMoviesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getIntheaterMovies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetOpeningMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningMovies(requestParameters: MovieListsApiGetOpeningMoviesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOpeningMovies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {MovieListsApiGetUpcomingMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingMovies(requestParameters: MovieListsApiGetUpcomingMoviesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUpcomingMovies(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBoxOfficeJson operation in MovieListsApi.
 * @export
 * @interface MovieListsApiGetBoxOfficeJsonRequest
 */
export type MovieListsApiGetBoxOfficeJsonRequest = {
    
    /**
    * Limits the number of movies returned
    * @type {string}
    * @memberof MovieListsApiGetBoxOfficeJson
    */
    readonly limit?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof MovieListsApiGetBoxOfficeJson
    */
    readonly country?: string
    
}

/**
 * Request parameters for getIntheaterMovies operation in MovieListsApi.
 * @export
 * @interface MovieListsApiGetIntheaterMoviesRequest
 */
export type MovieListsApiGetIntheaterMoviesRequest = {
    
    /**
    * The amount of movies in theaters to show per page
    * @type {string}
    * @memberof MovieListsApiGetIntheaterMovies
    */
    readonly pageLimit?: string
    
    /**
    * The selected page of in theaters movies
    * @type {string}
    * @memberof MovieListsApiGetIntheaterMovies
    */
    readonly page?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof MovieListsApiGetIntheaterMovies
    */
    readonly country?: string
    
}

/**
 * Request parameters for getOpeningMovies operation in MovieListsApi.
 * @export
 * @interface MovieListsApiGetOpeningMoviesRequest
 */
export type MovieListsApiGetOpeningMoviesRequest = {
    
    /**
    * Limits the number of opening movies returned
    * @type {string}
    * @memberof MovieListsApiGetOpeningMovies
    */
    readonly limit?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof MovieListsApiGetOpeningMovies
    */
    readonly country?: string
    
}

/**
 * Request parameters for getUpcomingMovies operation in MovieListsApi.
 * @export
 * @interface MovieListsApiGetUpcomingMoviesRequest
 */
export type MovieListsApiGetUpcomingMoviesRequest = {
    
    /**
    * The amount of upcoming movies to show per page
    * @type {string}
    * @memberof MovieListsApiGetUpcomingMovies
    */
    readonly pageLimit?: string
    
    /**
    * The selected page of upcoming movies
    * @type {string}
    * @memberof MovieListsApiGetUpcomingMovies
    */
    readonly page?: string
    
    /**
    * Provides localized data for the selected country (ISO 3166-1 alpha-2) if available. Otherwise, returns US data.
    * @type {string}
    * @memberof MovieListsApiGetUpcomingMovies
    */
    readonly country?: string
    
}

/**
 * MovieListsApiGenerated - object-oriented interface
 * @export
 * @class MovieListsApiGenerated
 * @extends {BaseAPI}
 */
export class MovieListsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {MovieListsApiGetBoxOfficeJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieListsApiGenerated
     */
    public getBoxOfficeJson(requestParameters: MovieListsApiGetBoxOfficeJsonRequest = {}, options?: AxiosRequestConfig) {
        return MovieListsApiFp(this.configuration).getBoxOfficeJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {MovieListsApiGetIntheaterMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieListsApiGenerated
     */
    public getIntheaterMovies(requestParameters: MovieListsApiGetIntheaterMoviesRequest = {}, options?: AxiosRequestConfig) {
        return MovieListsApiFp(this.configuration).getIntheaterMovies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {MovieListsApiGetOpeningMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieListsApiGenerated
     */
    public getOpeningMovies(requestParameters: MovieListsApiGetOpeningMoviesRequest = {}, options?: AxiosRequestConfig) {
        return MovieListsApiFp(this.configuration).getOpeningMovies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {MovieListsApiGetUpcomingMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieListsApiGenerated
     */
    public getUpcomingMovies(requestParameters: MovieListsApiGetUpcomingMoviesRequest = {}, options?: AxiosRequestConfig) {
        return MovieListsApiFp(this.configuration).getUpcomingMovies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
